#include<iostream>
#include<queue>
using namespace std;
bool solution=false;
struct board{
int mat[8][8];
int queens;
};
queue<board> q1;
board initialize(board &b1){
for(int i=0;i<8;i++){
for(int j=0;j<8;j++){
b1.mat[i][j]=0;
}
}
b1.queens=0;
return b1;
}
void print(board &temp){
//cout<<"temp"<<endl;
for(int i=0;i<8;i++){
for(int j=0;j<8;j++){
cout<<temp.mat[i][j]<<" ";
}
cout<<endl;
}
cout<<endl<<endl;
}
bool isvalid(board &temp){
int q=temp.queens,p=0,i,i2;
for(i=0;i<8;i++){
if(temp.mat[q-1][i]==1) break;
}
for(int j=q-2;j>=0;j--){
if(temp.mat[j][i]==1){
return false;
}
}
i2=i-1;
for(int j=q-2;j>=0;j--){
if(j<0||i2<0) break;
if(temp.mat[j][i2]==1) return false;
i2--;
}
i2=i+1;
for(int j=q-2;j>=0;j--){
if(j<0||i2>7) break;
if(temp.mat[j][i2]==1) return false;
i2++;
}
return true;
}

void states(queue<board> &q1){
board temp;
bool oc=true;
temp=q1.front();
q1.pop();
int q=temp.queens;
    if(temp.queens==8) {
    print(temp);
    cout<<"solution found\n";
    solution=true;
    return;
}
for(int i=0;i<8;i++){
temp.mat[q][i]=1;
temp.queens++;
cout<<"queens"<<temp.queens<<endl;
if(q==0||isvalid(temp)){
print(temp);
cout<<"valid"<<endl;
q1.push(temp);
}
temp.queens--;
temp.mat[q][i]=0;
}
}
int main(){
board b1;
initialize(b1);
q1.push(b1);
    while(!q1.empty()&&solution==false){
    states(q1);
   
}
return 0;
}
